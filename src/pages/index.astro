---
import Card, { type CardProps } from "../components/card/card";
import { verifySessionCookie } from "../firebase/server/auth";
import {
  BetStatus,
  type GetBetDto,
} from "../firebase/server/firestore/models/bet.model";
import { getUser } from "../firebase/server/firestore/repositories/user.repositories";
import RootLayout from "../layouts/root-layout.astro";
import { ApiError, logger } from "../utils/error";
import { ErrorType } from "../utils/error/models";

let cardDetails: CardProps[] = [];
try {
  const cookie = Astro.cookies.get("session")?.value;
  if (!cookie) throw new ApiError(ErrorType.UNAUTHORIZED, "No Cookie");
  const idToken = await verifySessionCookie(cookie);
  const bets = await getUser(idToken.uid);

  const calcBetWinnings = (bet: GetBetDto) => {
    return bet.odds * bet.stake - bet.stake;
  };
  const pendingBets = bets.filter((bet) => bet.status === BetStatus.PENDING);

  const profit = bets!
    .filter((bet) => bet.status !== BetStatus.PENDING)
    .reduce((acc, bet) => {
      if (bet.status === BetStatus.WIN) {
        return acc + calcBetWinnings(bet);
      }
      return acc - bet.stake;
    }, 0);

  const potentialProfit = pendingBets.reduce((acc, bet) => {
    return acc + calcBetWinnings(bet);
  }, 0);

  const potentialLost = pendingBets.reduce((acc, bet) => {
    return acc - bet.stake;
  }, 0);

  cardDetails = [
    { title: "Profit", amount: profit },
    { title: "Bank Roll", amount: profit + 100 },
    { title: "Potential Profit", amount: potentialProfit },
    { title: "Potential Lost", amount: potentialLost },
  ];
} catch (err) {
  logger(err);
  return Astro.redirect("/sign-in");
}
---

<RootLayout>
  <main>
    <div
      class="mx-auto grid max-w-md grid-cols-2 gap-2 p-5 md:max-w-full md:grid-cols-4"
    >
      {cardDetails.map((card) => <Card {...card} />)}
    </div>
  </main>
</RootLayout>
